import os
import platform
from ansible.module_utils.basic import AnsibleModule


def pacman_in_path(module):
    rc, stdout, stderr = module.run_command('which pacman', check_rc=False)
    return rc == 0


def package_installed(module, pkg):
    rc, stdout, stderr = module.run_command(
        'pacman -Q %s' % module, check_rc=False)
    return rc == 0


def check_packages(module, pkgs):
    would_be_changed = []

    for pkg in pkgs:
        is_installed = package_installed(module, pkg)
        if not is_installed:
            would_be_changed.append(pkg)

    if would_be_changed:
        module.exit_json(
            changed=True,
            msg='%s package(s) would be installed' % len(would_be_changed))
    else:
        module.exit_json(changed=False, msg='all packages already installed')


def download_packages(module, pkgs, dir):
    cmds = [
        'curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/%s.tar.gz',
        '%s tar xzf %s.tar.gz'
    ]
    for pkg in pkgs:
        if package_installed(module, pkg):
            continue
        os.chdir(dir)

        for cmd in cmds:
            rc, stdout, stderr = module.run_command(cmd % pkg, check_rc=False)
            if rc != 0:
                module.fail_json(
                    msg='failed to download package %s, because: %s' %
                    (pkg, stderr))


def install_packages(module, pkgs, dir):
    num_installed = 0

    if platform.machine().startswith('arm'):
        makepkg_args = '-Acsri'
    else:
        makepkg_args = '-csri'
    cmd = 'PKGEXT=".pkg.tar" makepkg %s --noconfirm --needed --noprogressbar' % makepkg_args

    if module.params['skip_pgp']:
        cmd += ' --skippgpcheck'

    for pkg in pkgs:
        if package_installed(module, pkg):
            continue

        os.chdir(os.path.join(dir, pkg))

        rc, stdout, stderr = module.run_command(cmd, check_rc=False)
        if rc != 0:
            module.fail_json(msg='failed to install package %s, because: %s' %
                             (pkg, stderr))

        num_installed += 1

    if num_installed > 0:
        module.exit_json(
            changed=True, msg='installed %s package(s)' % num_installed)

    else:
        module.exit_json(
            changed=False, msg='all packages were already installed')

    pass


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            dir=dict(),
            skip_gpg=dict(default=True, type='bool')))

    # Fail if pacman is not available
    if not pacman_in_path(module):
        module.fail_json(msg='could not locate pacman executable')

    p = module.params

    pkgs = p['name'].split(",")

    if not p['dir']:
        dir = "/tmp/aur"

    if not os.path.exists(dir):
        module.fail_json(msg="directory %s does not exist" % dir)

    if module.check_mode:
        check_packages(module, pkgs)

    download_packages(module, pkgs, dir)
    install_packages(module, pkgs, dir)


main()
